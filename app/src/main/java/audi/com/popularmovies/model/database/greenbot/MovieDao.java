package audi.com.popularmovies.model.database.greenbot;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MOVIE.
*/
public class MovieDao extends AbstractDao<Movie, Integer> {

    public static final String TABLENAME = "MOVIE";

    /**
     * Properties of entity Movie.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", true, "ID");
        public final static Property Adult = new Property(1, Boolean.class, "adult", false, "ADULT");
        public final static Property Poster_path = new Property(2, String.class, "poster_path", false, "POSTER_PATH");
        public final static Property Overview = new Property(3, String.class, "overview", false, "OVERVIEW");
        public final static Property Release_date = new Property(4, String.class, "release_date", false, "RELEASE_DATE");
        public final static Property Original_title = new Property(5, String.class, "original_title", false, "ORIGINAL_TITLE");
        public final static Property Original_language = new Property(6, String.class, "original_language", false, "ORIGINAL_LANGUAGE");
        public final static Property Title = new Property(7, String.class, "title", false, "TITLE");
        public final static Property Backdrop_path = new Property(8, String.class, "backdrop_path", false, "BACKDROP_PATH");
        public final static Property Popularity = new Property(9, Double.class, "popularity", false, "POPULARITY");
        public final static Property Vote_average = new Property(10, Double.class, "vote_average", false, "VOTE_AVERAGE");
        public final static Property Vote_count = new Property(11, Integer.class, "vote_count", false, "VOTE_COUNT");
        public final static Property Video = new Property(12, Boolean.class, "video", false, "VIDEO");
    };


    public MovieDao(DaoConfig config) {
        super(config);
    }
    
    public MovieDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MOVIE' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'ADULT' INTEGER," + // 1: adult
                "'POSTER_PATH' TEXT," + // 2: poster_path
                "'OVERVIEW' TEXT," + // 3: overview
                "'RELEASE_DATE' TEXT," + // 4: release_date
                "'ORIGINAL_TITLE' TEXT," + // 5: original_title
                "'ORIGINAL_LANGUAGE' TEXT," + // 6: original_language
                "'TITLE' TEXT," + // 7: title
                "'BACKDROP_PATH' TEXT," + // 8: backdrop_path
                "'POPULARITY' REAL," + // 9: popularity
                "'VOTE_AVERAGE' REAL," + // 10: vote_average
                "'VOTE_COUNT' INTEGER," + // 11: vote_count
                "'VIDEO' INTEGER);"); // 12: video
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MOVIE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Movie entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean adult = entity.getAdult();
        if (adult != null) {
            stmt.bindLong(2, adult ? 1l: 0l);
        }
 
        String poster_path = entity.getPoster_path();
        if (poster_path != null) {
            stmt.bindString(3, poster_path);
        }
 
        String overview = entity.getOverview();
        if (overview != null) {
            stmt.bindString(4, overview);
        }
 
        String release_date = entity.getRelease_date();
        if (release_date != null) {
            stmt.bindString(5, release_date);
        }
 
        String original_title = entity.getOriginal_title();
        if (original_title != null) {
            stmt.bindString(6, original_title);
        }
 
        String original_language = entity.getOriginal_language();
        if (original_language != null) {
            stmt.bindString(7, original_language);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
 
        String backdrop_path = entity.getBackdrop_path();
        if (backdrop_path != null) {
            stmt.bindString(9, backdrop_path);
        }
 
        Double popularity = entity.getPopularity();
        if (popularity != null) {
            stmt.bindDouble(10, popularity);
        }
 
        Double vote_average = entity.getVote_average();
        if (vote_average != null) {
            stmt.bindDouble(11, vote_average);
        }
 
        Integer vote_count = entity.getVote_count();
        if (vote_count != null) {
            stmt.bindLong(12, vote_count);
        }
 
        Boolean video = entity.getVideo();
        if (video != null) {
            stmt.bindLong(13, video ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Movie readEntity(Cursor cursor, int offset) {
        Movie entity = new Movie( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // adult
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // poster_path
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // overview
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // release_date
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // original_title
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // original_language
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // title
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // backdrop_path
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // popularity
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // vote_average
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // vote_count
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0 // video
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Movie entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setAdult(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setPoster_path(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOverview(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRelease_date(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOriginal_title(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOriginal_language(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTitle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBackdrop_path(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPopularity(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setVote_average(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setVote_count(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setVideo(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(Movie entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(Movie entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
